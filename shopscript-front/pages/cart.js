import Center from "@/components/Center";
import Header from "@/components/Header";
import { useContext, useEffect, useState } from "react";
import { CartContext } from "@/components/CartContext";
import axios from "axios";
import Table from "@/components/Table";
import Input from "@/components/Input";
import {
  Box,
  CityHolder,
  ColumnsWrapper,
  EmptyCartMessage,
  GobackButton,
  PaymentH1,
  PaymentH5,
  PaymentP,
  PaymentSpan,
  PriceTd,
  ProductImageBox,
  ProductInfoCell,
  ProductTitleBox,
  QuantityLabel,
  StyledButton,
  StyledQuantityButton,
} from "@/styles/CartStyles";
import Head from "next/head";
import { useRouter } from "next/router";

export default function cart() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [city, setCity] = useState("");
  const [postalCode, setPostalCode] = useState("");
  const [streetAddress, setStreetAddress] = useState("");
  const [country, setCountry] = useState("");
  const [paymentSuccess, setPaymentSuccess] = useState(false);

  const { cartProducts, addProduct, removeProduct, clearCart } =
    useContext(CartContext);

  const [products, setProducts] = useState([]);

  const router = useRouter();

  useEffect(() => {
    if (cartProducts?.length > 0) {
      axios.post("/api/cart", { ids: cartProducts }).then((response) => {
        setProducts(response.data);
      });
    } else {
      setProducts([]);
    }
  }, [cartProducts]);

  useEffect(() => {
    if (router.asPath.includes("success")) {
      clearCart();
      localStorage.removeItem("cart");
    }
  }, []);

  function moreOfThisProduct(id) {
    addProduct(id);
  }

  function lessOfThisProduct(id) {
    removeProduct(id);
  }

  let total = 0;
  for (const productId of cartProducts) {
    const product = products.find((p) => p._id === productId);
    const priceInINR = product?.price || 0;
    total += parseInt(priceInINR);
  }

  const formatterOfTotalPrice = new Intl.NumberFormat("en-IN");
  const formattedTotalPrice = formatterOfTotalPrice.format(total);

  async function goToPayment() {
    const response = await axios.post("/api/checkout", {
      name,
      email,
      city,
      postalCode,
      streetAddress,
      country,
      cartProducts,
    });
    if (response.data.url) {
      window.location = response.data.url;
    }
  }

  useEffect(() => {
    if (router.asPath.includes("success")) {
      setPaymentSuccess(true);
    }
  }, [router]);

  return (
    <>
      <Head>
        <title>ShopScript : Cart</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {paymentSuccess ? (
        <>
          <Header />
          <Center>
            <Box>
              <PaymentH1>PAYMENT SUCCESSFUL !!</PaymentH1>
              <PaymentH5>Thank You For Ordering</PaymentH5>
              <PaymentP>We will email you with details soon</PaymentP>
              <PaymentSpan> - Team ShopScript</PaymentSpan>
            </Box>
          </Center>
        </>
      ) : (
        <>
          <Header />
          <Center>
            <ColumnsWrapper>
              <Box>
                <h2>Cart</h2>
                {!cartProducts?.length && (
                  <EmptyCartMessage>
                    {" "}
                    Your Cart is Empty
                    <GobackButton href={"/"}>Add Items</GobackButton>
                  </EmptyCartMessage>
                )}
                {products?.length > 0 && (
                  <Table>
                    <thead>
                      <tr>
                        <th>Product</th>
                        <th>Quantity</th>

                        <th>Price</th>
                      </tr>
                    </thead>
                    <tbody>
                      {products.map((product) => {
                        const calcPrice =
                          cartProducts.filter((id) => id === product._id)
                            .length * product.price;

                        const formatter = new Intl.NumberFormat("en-IN");
                        const formattedPrice = formatter.format(calcPrice);
                        return (
                          <tr>
                            <ProductInfoCell>
                              <ProductImageBox>
                                <img src={product.images[0]} alt="..." />
                              </ProductImageBox>
                              <ProductTitleBox>
                                {product.title}{" "}
                              </ProductTitleBox>
                            </ProductInfoCell>
                            <td>
                              <StyledQuantityButton
                                onClick={() => lessOfThisProduct(product._id)}
                              >
                                -
                              </StyledQuantityButton>
                              <QuantityLabel>
                                {
                                  cartProducts.filter(
                                    (id) => id === product._id
                                  ).length
                                }
                              </QuantityLabel>

                              <StyledQuantityButton
                                onClick={() => moreOfThisProduct(product._id)}
                              >
                                +
                              </StyledQuantityButton>
                            </td>
                            <td>&#x20b9; {formattedPrice}</td>
                          </tr>
                        );
                      })}
                      <tr>
                        <PriceTd>Total Price</PriceTd>
                        <td></td>
                        <PriceTd>&#x20b9; {formattedTotalPrice}</PriceTd>
                      </tr>
                    </tbody>
                  </Table>
                )}
              </Box>
              {!!cartProducts.length && (
                <Box>
                  <h2>Order Information</h2>
                  <Input
                    type="text"
                    placeholder="Your Name"
                    value={name}
                    name="name"
                    onChange={(ev) => setName(ev.target.value)}
                    autoComplete="off"
                  />
                  <Input
                    type="text"
                    placeholder="Email"
                    value={email}
                    name="email"
                    onChange={(ev) => setEmail(ev.target.value)}
                    autoComplete="off"
                  />
                  <CityHolder>
                    <Input
                      type="text"
                      placeholder="City"
                      value={city}
                      name="city"
                      onChange={(ev) => setCity(ev.target.value)}
                      autoComplete="off"
                    />
                    <Input
                      type="text"
                      placeholder="Postal Code"
                      value={postalCode}
                      name="postalCode"
                      onChange={(ev) => setPostalCode(ev.target.value)}
                      autoComplete="off"
                    />
                  </CityHolder>

                  <Input
                    type="text"
                    placeholder="Street Address"
                    value={streetAddress}
                    name="streetAddress"
                    onChange={(ev) => setStreetAddress(ev.target.value)}
                    autoComplete="off"
                  />
                  <Input
                    type="text"
                    placeholder="Country"
                    value={country}
                    name="country"
                    onChange={(ev) => setCountry(ev.target.value)}
                    autoComplete="off"
                  />
                  <StyledButton onClick={goToPayment}>
                    Continue To Payment
                  </StyledButton>
                </Box>
              )}
            </ColumnsWrapper>
          </Center>{" "}
        </>
      )}
    </>
  );
}
